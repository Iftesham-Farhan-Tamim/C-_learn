// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;

//     cout << vec.size() << endl;
// }

// output:
// 0
// ............................................................................................
// //emplace_back = push_back

// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);

//     cout << vec.size() << endl;
//     cout << vec.capacity() << endl;

//     for(int ele : vec) {
//         cout << ele << " ";
//     }
// }

// output:
// 3
// 4
// 1 2 3
// ............................................................................................
// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);
//     // vec.emplace_back(6);

//     vec.pop_back();

//     for(int ele : vec) {
//         cout << ele << " ";
//     }
// }

// output:
// 1 2 3 4
// ............................................................................................
// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);

//     cout << vec[2] << endl;
//     cout << vec.at(3) << endl;

//     cout << "front : " << vec.front() << endl;
//     cout << "back : " << vec.back() << endl;
// }

// output:
// 3
// 4
// front : 1
// back : 5
// ............................................................................................
// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec = {1,2,3,4,5};

//     for(int i=0; i<vec.size(); i++) {
//         cout << vec[i] << endl;
//     }
// }

// output:
// 1 2 3 4 5
// ............................................................................................
// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec(3, 10);

//     for(int ele : vec) {
//         cout << ele << " ";
//     }
// }

// output:
// 10 10 10
// ............................................................................................
// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec = {1, 2, 3, 4, 5};

//     vector<int> vec1(vec);

//     for (int ele : vec1) {
//         cout << ele << " ";  
//     }
// }

// output:
// 1 2 3 4 5
// ............................................................................................
// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);

//     vec.erase(vec.begin());  // removes 1st idx element (1)
//     vec.erase(vec.begin() + 2);  // removes 3rd idx element (4)

//     for(int ele : vec) {
//         cout << ele << " ";
//     }
// }

// output:
// 2 3 5
// ............................................................................................
// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);

//     vec.erase(vec.begin() + 1, vec.begin() + 3);  // removes element from idx (1-2)

//     for(int ele : vec) {
//         cout << ele << " ";
//     }
// }

// output:
// 1 4 5
// ............................................................................................
// #include<bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);

//     vec.insert(vec.begin() + 2, 100);

//     for(int ele : vec) {
//         cout << ele << " ";
//     }

//     // vec.clear();  // it will remove all the element, but capacity remains same. 
// }

// output:
// 1 2 100 3 4 5
// ............................................................................................
// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;

//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);

//     cout << "vec begin : " << *(vec.begin()) << endl;
//     cout << "vec end : " << *(vec.end()) << endl;
// }

// output:
// vec begin : 1
// vec end : 0
// ............................................................................................
// //vector iterators

// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     vector<int> vec;
//     vec.push_back(1);
//     vec.push_back(2);
//     vec.push_back(3);
//     vec.push_back(4);
//     vec.push_back(5);

//     // vector<int>::iterator it;  // for use of auto, it doesn't required

//     for(auto it = vec.begin(); it != vec.end(); it++) {
//         cout << *(it) << " ";
//     }

//     cout << endl;

//     for(auto it = vec.rbegin(); it!=vec.rend(); it++) {  // rbegin = reverse begin, rend = reverse end
//         cout << *(it) << " ";
//     }
// }

// output:
// 1 2 3 4 5
// 5 4 3 2 1
// ............................................................................................
// //List = doubly linkedlist

// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     list<int> l;

//     l.push_back(1);
//     l.push_back(2);
//     l.push_front(3);
//     l.push_front(5);

//     for(int ele : l) {
//         cout << ele << " ";
//     }

//     cout << endl;

//     l.pop_back();
//     l.pop_front();

//     for(int ele : l) {
//         cout << ele << " ";
//     }
// }

// output:
// 5 3 1 2
// 3 1
// ............................................................................................
// //Deque = Double Ended Queue
// //Dequeue(Generic word) = pop

// #include <bits/stdc++.h>
// using namespace std;

// int main() {
//     deque<int> d;

//     d.push_back(1);
//     d.push_back(2);
//     d.push_front(3);
//     d.push_front(5);

//     for(int ele : d) {
//         cout << ele << " ";
//     }

//     cout << endl;

//     d.pop_back();
//     d.pop_front();

//     for(int ele : d) {
//         cout << ele << " ";
//     }

//     cout << endl;

//     cout << d[2] << endl;
// }

// output:
// 5 3 1 2 
// 3 1
// 2
// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................
